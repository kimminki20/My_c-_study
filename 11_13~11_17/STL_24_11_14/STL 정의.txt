1.STL: c++에서 제공하는 팜플릿 기반의 표준 라이브러리
->c++에서 함수나 클래스를 구현할 때 어떤 타입에서도 동작할 수 있는 문법

2.순방향 반복자 begin() -> end()
- 선언 vector<int>::iterator it;
- 초기화 it = vec.begin()
- 사용 *it을 사용해서 가리키는 요소 접근
    for(vector<int>::iterator it = vec.begin(); it !=vec.end(); ++it){
        cout << *it << " ";
    }

3.역방향 반복자 rbegin() -> rend()
- 선언 vector<int>:: reverse_iterator rit;
- 초기화 rit = vector.begin();
- 사용 : *rit을 통해서 가리키는 요소 접근
    for(vector<int>::reverse_iterator rit = vec.rbegin(); rit!=vec.rend(); ++rit){
        cout << *rit <<" ";
    }

4.STL의 컨테이너 종류
-컨테이너 공부 할 때: 데이터 저장의 특성도 중요, *어떤 방식으로 저장하고 접근하는지 아는 게 중요*

4-1. 벡터(vector)
- 배열과 매우 유사한 컨테이너.
- 데이터를 순차적으로 저장하고, 인덱스를 통해서 특정 위치의 원소에 쉽게 접근 가능

4-2. 셋(set)
- 중복을 허용하지않음.
- 저장된 데이터를 자동으로 정렬하는 컨테이너.
- 삽입과 동시에 데이터가 정렬(균형 이진트리로 동작) -> 삽입,삭제 탐색 O(logN)
- 원소를 삽입과 동시에 정렬해야 하는 경우 효율적

4-3. 맵(map)
- 키와 값을 쌍으로 갖는 컨테이너.
- key를 통해서 동작, key 기준으로 정렬
- 키와 값의 쌍을 entry라 하여 STL에서 std::pair 타입으로 표현
- 내부는 균형 이진 탐색 트리로 구성 항상 카 값을 기준으로 '자동 정렬'
- 검색, 삽입, 삭제 시간 복잡도 O(logN) + 맵의 키 값은 중복되지 않고 유일
- 키 자체를 통해서 원하는 값 찾기 가능
 